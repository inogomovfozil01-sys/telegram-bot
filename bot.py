import os
import yt_dlp
import logging
import time
import socket
import asyncio
from functools import partial
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# ================== –í–ê–® –¢–û–ö–ï–ù ==================
BOT_TOKEN = "8318059900:AAHXW1Y2K6c32tAmelmZ_f3mVZVY_0dZyd0"

# ================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==================
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ================== –ü–†–û–í–ï–†–ö–ê –î–ê–¢–ê-–¶–ï–ù–¢–†–û–í TELEGRAM ==================
def check_telegram_dc():
    telegram_dcs = {
        "DC1": "149.154.167.40",
        "DC2": "149.154.167.50",
        "DC3": "149.154.167.91",
        "DC4": "149.154.167.92",
        "DC5": "91.108.56.136",
    }

    logger.info("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä–æ–≤ Telegram...")
    best_dc = None
    best_ping = float("inf")

    for dc_name, ip in telegram_dcs.items():
        start = time.time()
        try:
            sock = socket.create_connection((ip, 443), timeout=1)
            sock.close()
            ping = (time.time() - start) * 1000
            logger.info(f"‚úÖ {dc_name} ({ip}) –æ—Ç–∫–ª–∏–∫: {ping:.1f} ms")
            if ping < best_ping:
                best_ping = ping
                best_dc = (dc_name, ip)
        except Exception:
            logger.warning(f"‚ùå {dc_name} ({ip}) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    if best_dc:
        logger.info(f"üèÜ –õ—É—á—à–∏–π –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä: {best_dc[0]} ({best_dc[1]}) ‚Äî {best_ping:.1f} ms")
    else:
        logger.error("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä Telegram –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç! –ü—Ä–æ–≤–µ—Ä—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.")
        time.sleep(5)
        check_telegram_dc()

# ================== –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û –° –ü–û–î–î–ï–†–ñ–ö–û–ô COOKIE ==================
def download_video_info(url: str, filename_noext: str, cookies_file: str = None):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ yt_dlp —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cookies –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ.
    """
    ydl_opts = {
        'format': 'best',
        'outtmpl': filename_noext + '.%(ext)s',
        'quiet': True,
        'noplaylist': True,
        'max_filesize': 500 * 1024 * 1024,  # 500 –ú–ë
    }

    if cookies_file and os.path.exists(cookies_file):
        ydl_opts['cookiefile'] = cookies_file
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è cookies –∏–∑ {cookies_file}")

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)
        return info

# ================== /start ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –∑–∞–ø—É—Å—Ç–∏–ª /start")

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube, Instagram –∏ TikTok.\n\n"
        "üìé –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è.\n"
        "üí° –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ –¥–æ–±–∞–≤—å —Ñ–∞–π–ª cookies (cookies.txt) —Ä—è–¥–æ–º —Å –±–æ—Ç–æ–º."
    )

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ==================
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message_text = update.message.text.strip()
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.username} (ID: {user.id}): {message_text}")

    if not (message_text.startswith("http://") or message_text.startswith("https://")):
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü—Ä–∏—à–ª–∏ –Ω–∞—Å—Ç–æ—è—â—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
        return

    await update.message.reply_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è üïí")
    logger.info(f"‚¨áÔ∏è –ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è {user.username} ‚Äî {message_text}")

    loop = asyncio.get_running_loop()
    try:
        # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        timestamp = int(time.time())
        base_filename = f"video_{user.id}_{timestamp}"
        cookies_file = "cookies.txt"  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø—É—Ç—å –∫ —Å–≤–æ–µ–º—É cookies —Ñ–∞–π–ª—É

        download_func = partial(download_video_info, message_text, base_filename, cookies_file)
        info = await loop.run_in_executor(None, download_func)

        ext = info.get("ext", "mp4")
        filepath = f"{base_filename}.{ext}"

        total_seconds = int(info.get("duration") or 0)
        mins = total_seconds // 60
        secs = total_seconds % 60

        title = info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        uploader = info.get("uploader", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä")

        caption = (
            f"üé• <b>{title}</b>\n"
            f"üë§ –ê–≤—Ç–æ—Ä: {uploader}\n"
            f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {mins}:{secs:02d}\n\n"
            f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ! üéâ"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(filepath, "rb") as video:
            await update.message.reply_video(
                video=video,
                caption=caption,
                parse_mode="HTML"
            )

        logger.info(f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user.username} ({user.id}) ‚Äî {title}")
        os.remove(filepath)

    except yt_dlp.utils.DownloadError as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É {user.username}: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å cookies.txt –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
        )
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ —É {user.username}: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# ================== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ==================
def main():
    check_telegram_dc()
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ.")
    app.run_polling()

if __name__ == "__main__":
    main()